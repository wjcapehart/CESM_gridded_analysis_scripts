by   = "day")
tt1 = tt2+1
}
# print( c(toString(tt1-1),
#          toString(nt),
#          toString(as.Date(time_days.85[tt1-1]))
#          )
#      )
}
print(paste("final day",time_days.85[nt]))
# mirror the RCP45 time to match the RCP85
time_days.45 = time_days.85
time_days    = time_days.85
# and tidy things up
remove(y1,y2,yy,mm,nd,nm)
# create ensemble dimension
ensemble = seq(from =           1,  # start value
to   = n_ensembles,  # end value
by   =           1   # increment
)
# import spatial coordinates
lon = ncvar_get(nc    = nc.85, # netcdf file ID
varid = "lon"  # variable name from file
)
lon = lon - 360.0  # converting to +/- deg east for easier plotting
lat = ncvar_get(nc    = nc.85,  # netcdf file ID
varid = "lat"  # variable name from file
)
# we now get the target x and y locations
target_x <- which.min( abs(         lon -  target_lon) )
target_y <- which.min( abs(         lat -  target_lat) )
var2d.45 = ncvar_get(nc      = nc.45,                      # netcdf file ID
varid   = target_variable,            # variable name from file
verbose = FALSE,                      # print diagnostic data
start   = c( 1,  1,           1,  1), # starting coordinates
count   = c(10,  7, n_ensembles, nt)  # end coordinates (we're only going to 2080 and using 15 ensembles)
) * 9./5. - 459.67                  # scaling temperature from K to DegF
var2d.85 = ncvar_get(nc      = nc.85,                      # netcdf file ID
varid   = target_variable,            # variable name from file
verbose = FALSE,                      # print diagnostic data
start   = c( 1,  1,  1,  1),          # starting coordinates
count   = c(10,  7, n_ensembles, nt)  # end coordinates (we're only going to 2080 and using 15 ensembles)
) * 9./5. - 459.67                  # scaling temps from K to degF
dimnames(var2d.45) <- list(lon,lat,ensemble,time_days)
dimnames(var2d.85) <- list(lon,lat,ensemble,time_days)
remove(time_days.45,
time_days.85,
RCP_45_File,
RCP_85_File,
URL_45,
URL_85,
URL_Root_Directory,
nc.45,
nc.85)
var1d.45 = t(var2d.45[target_x, target_y, , ]) # t() == transpose
var1d.85 = t(var2d.85[target_x, target_y, , ]) # t() == transpose
dimnames(var1d.45) <- list(as.Date(time_days), ensemble)
dimnames(var1d.85) <- list(as.Date(time_days), ensemble)
variable = melt(data      = var1d.45,              # your array
na.rm       = TRUE,                  # don't use missing values
varnames    = c("Time","Ensemble"),  # names of your two dimensions
value.name  = "RCP45")               # the final name of your aray value
var1d.85 = melt(data        = var1d.85,              # your array
na.rm       = TRUE,                  # don't use missing values
varnames    = c("Time","Ensemble"),  # names of your two dimensions
value.name  = "RCP85")               # the final name of your aray value
variable$Time = as.Date(variable$Time, origin="1970-01-01")
variable$RCP85 = var1d.85$RCP85
variable$month   = month(variable$Time)
variable$year   = year(variable$Time)
variable$decade = trunc( variable$year/10. )*10
remove(var1d.85,
var1d.45,
var2d.45,
var2d.85,
lon,
lat,
target_lat,
target_lon,
target_variable,
target_x,
target_y)
variable = variable[(variable$month>=5 & variable$month<=9),]
str(variable)
ens_target = 1 # just use the first ensemble member
subset = subset(variable,
(Ensemble==ens_target)  &
((year>=base_start) &
(year<=base_end)   )
)
# always nice to see what your data looks like.
hist(x      = subset$RCP45, # omitting zero temperatures days
xlab   = paste(variable_name,                   # xaxis title
" (",
variable_units,
")",
sep=""),
main   = paste(location_name,
"RCP4.5 Ensemble Member 1",
sep = " "),
freq   = TRUE,
breaks = 100
)
fit_GP  = fevd(x          = RCP45,
data       = subset,
units      = variable_units,
time.units = "days",
type       = extreme_func,
verbose    = TRUE
)
plot(fit_GP)
return_intervals = seq(from =  2,
to   = 20,
by   =  1)
n_return_intervals = length(return_intervals)
return_GP = return.level(x             = fit_GP,
return.period = return_intervals,
do.ci         = TRUE)
print(return_GP)
# tidy up the demo
remove(return_GP,
fit_GP,
subset)
# start with the return intervals.
return_intervals = seq(from =  2,
to   = 20,
by   =  1)
n_return_intervals = length(return_intervals)
# for each case/period create arrays for the return and CI bounds
# first for our base period
rcp45_base_period_return  = array(data= 0,
dim = c(n_ensembles,
n_return_intervals))
dimnames(rcp45_base_period_return) = list(ensemble,
return_intervals)
rcp45_base_period_ci_ub   = rcp45_base_period_return
rcp45_base_period_ci_lb   = rcp45_base_period_return
rcp85_base_period_return  = rcp45_base_period_return
rcp85_base_period_ci_ub   = rcp45_base_period_return
rcp85_base_period_ci_lb   = rcp45_base_period_return
# then for our test period(s)
rcp45_per1_period_return  = rcp45_base_period_return
rcp45_per1_period_ci_ub   = rcp45_base_period_return
rcp45_per1_period_ci_lb   = rcp45_base_period_return
rcp85_per1_period_return  = rcp45_base_period_return
rcp85_per1_period_ci_ub   = rcp45_base_period_return
rcp85_per1_period_ci_lb   = rcp45_base_period_return
for (ens_target in 1:n_ensembles) {
######################################
#
# Base Period
#
# create segments for RCP 45 and RCP 85 for your period(s)
subset = subset(variable,
(Ensemble==ens_target)  &
((year>=base_start) &
(year<=base_end)   )
)
# fit an extreme value dist to the data
fit_GP_45 = fevd(x          = RCP45,
data       = subset,
units      = variable_units,
time.units = "days",
type       = extreme_func,
verbose    = FALSE
)
fit_GP_85 = fevd(x          = RCP85,
data       = subset,
units      = variable_units,
time.units = "days",
type       = extreme_func,
verbose    = FALSE
)
# calculate the return periods and load into the temporary storage arrays.
return_GP = return.level(x             = fit_GP_45,
return.period = return_intervals,
do.ci         = TRUE)
rcp45_base_period_ci_lb[ ens_target, ] = return_GP[ , 1]
rcp45_base_period_return[ens_target, ] = return_GP[ , 2]
rcp45_base_period_ci_ub[ ens_target, ] = return_GP[ , 3]
return_GP = return.level(x             = fit_GP_85,
return.period = return_intervals,
do.ci         = TRUE)
rcp85_base_period_ci_lb[ ens_target, ] = return_GP[ , 1]
rcp85_base_period_return[ens_target, ] = return_GP[ , 2]
rcp85_base_period_ci_ub[ ens_target, ] = return_GP[ , 3]
# tidy up
remove(subset,
fit_GP_45,
fit_GP_85,
return_GP)
#
######################################
######################################
#
#  Period #1
#
# create segments for RCP 45 and RCP 85 for your period(s)
subset = subset(variable,
(Ensemble==ens_target)  &
((year>=per1_start) &
(year<=per1_end)   )
)
# fit an extreme value dist to the data
fit_GP_45 = fevd(x          = RCP45,
data       = subset,
units      = variable_units,
time.units = "days",
type       = extreme_func,
verbose    = FALSE
)
fit_GP_85 = fevd(x          = RCP85,
data       = subset,
units      = variable_units,
time.units = "days",
type       = extreme_func,
verbose    = FALSE
)
# calculate the return periods and load into the temporary storage arrays.
return_GP = return.level(x             = fit_GP_45,
return.period = return_intervals,
do.ci         = TRUE)
rcp45_per1_period_ci_lb[ ens_target, ] = return_GP[ , 1]
rcp45_per1_period_return[ens_target, ] = return_GP[ , 2]
rcp45_per1_period_ci_ub[ ens_target, ] = return_GP[ , 3]
return_GP = return.level(x             = fit_GP_85,
return.period = return_intervals,
do.ci         = TRUE)
rcp85_per1_period_ci_lb[ ens_target, ] = return_GP[ , 1]
rcp85_per1_period_return[ens_target, ] = return_GP[ , 2]
rcp85_per1_period_ci_ub[ ens_target, ] = return_GP[ , 3]
# tidy up
remove(subset,
fit_GP_45,
fit_GP_85,
return_GP)
#
######################################
}
ens_target = 1 # just use the first ensemble member
subset = subset(variable,
(Ensemble==ens_target)  &
((year>=base_start) &
(year<=base_end)   )
)
# always nice to see what your data looks like.
hist(x      = subset$RCP45, # omitting zero temperatures days
xlab   = paste(variable_name,                   # xaxis title
" (",
variable_units,
")",
sep=""),
main   = paste(location_name,
"RCP4.5 Ensemble Member 1",
sep = " "),
freq   = TRUE,
breaks = 100
)
View(subset)
ens_target = 1 # just use the first ensemble member
subset = subset(variable,
(Ensemble==ens_target)  &
((year>=base_start) &
(year<=base_end)   )
)
# always nice to see what your data looks like.
hist(x      = subset$RCP45, # omitting zero temperatures days
xlab   = paste(variable_name,                   # xaxis title
" (",
variable_units,
")",
sep=""),
main   = paste(location_name,
"RCP4.5 Ensemble Member 1",
sep = " "),
freq   = TRUE,
breaks = 100
)
fit_GP  = fevd(x          = RCP45,
data       = subset,
units      = variable_units,
type       = extreme_func,
verbose    = TRUE
)
fit_GEV  = fevd(x          = RCP45,
data       = subset,
units      = variable_units,
type       = "GEV",
verbose    = TRUE
)
plot(fit_GEV,trace)
plot(fit_GEV,"trace)
")"
")"
plot(fit_GEV,"trace")
data("PORTw", package = "extRemes")
fit1 <- fevd(TMX1, PORTw, units = "deg C")
plot(fit1)
plot(fit_GEV)
print(max(subset$RCP45))
print(min(subset$RCP45))
fit_GP  = fevd(x          = RCP45,
data       = subset,
units      = variable_units,
time.units = "days",
type       = extreme_func,
verbose    = TRUE
)
fit_GP  = fevd(x          = RCP45,
data       = subset,
units      = variable_units,
time.units = "365/year",
type       = extreme_func,
verbose    = TRUE
)
variable = melt(data      = var1d.45,              # your array
na.rm       = TRUE,                  # don't use missing values
varnames    = c("Time","Ensemble"),  # names of your two dimensions
value.name  = "RCP45")               # the final name of your aray value
```
Repeat for 8.5 (we'll add those values to previous data frame)
```{r}
var1d.85 = melt(data        = var1d.85,              # your array
na.rm       = TRUE,                  # don't use missing values
varnames    = c("Time","Ensemble"),  # names of your two dimensions
value.name  = "RCP85")               # the final name of your aray value
```
Add we add time... and pull our RCP8.5 into our RCP4.5 set.
```{r}
variable$Time = as.Date(variable$Time, origin="1970-01-01")
variable$RCP85 = var1d.85$RCP85
```
We can also add some utility vectors to break things down by month, year and decade
```{r}
variable$month   = month(variable$Time)
variable$year   = year(variable$Time)
variable$decade = trunc( variable$year/10. )*10
library(ncdf4)     # processing netCDF data
library(lubridate) # processing dates and time
library(reshape2)  # manipulating data frames
library(extRemes)  # extreme data analysis
library(beanplot)  # trying to use the beanplot routine since box whiskers gave me some heartburn
location_name = "Rapid City"
target_lon  = -104. # degrees east
target_lat  =   44. # degrees north
n_ensembles = 15
base_start      = 1975              # start year
base_end        = base_start + 30-1 # end year  (just before our simulations diverge)
per1_start      = 2050              # start
per1_end        = per1_start + 30-1 # end year
wetting_rain_treshold = 0.1 * 25.4 # in -> mm (0.1 in = 2.54 )
URL_Root_Directory <- "http://kyrill.ias.sdsmt.edu:8080/thredds/dodsC/CESM_SODAK/"
# Here is the variable we want to extract
#  these should match the files names since the variable in the file and file name match
target_variable = "TREFHTMX"
variable_name   = "Daily Max Temperatures"
variable_units  = "°F" # after post processing (starts as m/s)
# get the extreme function to use
extreme_func = "GEV"
# get URL files
RCP_85_File  = paste(target_variable,
"_RCP85_SODAK_DAILY_1920-2100.nc4",
sep="")
RCP_45_File  = paste(target_variable,
"_RCP45_SODAK_DAILY_1920-2080.nc4",
sep="")
# make the final URLs for extracting with the "paste" function
URL_85  = paste(URL_Root_Directory,  # string 1 to concatenate
RCP_85_File,         # string 2 to concatenate
sep=""               # separation character ("" = none)
)
URL_45  = paste(URL_Root_Directory,  # string 1 to concatenate
RCP_45_File,         # string 2 to concatenate
sep=""               # separation character ("" = none)
)
nc.85 <- nc_open(filename = URL_85)
nc.45 <- nc_open(filename = URL_45)
print(nc.45)
# First get the specifics ranges that we'll need.
nt = 58765  # Total time steps we'll use
y1 =  1920  # starting calendar year
y2 =  2080  # ending calendar year
nm =    12  # number of months in a year
nd = c(31,28,31,30,31,30,31,31,30,31,30,31) # days in a month.
# we now create our straw time arrays (which are in standard calendar form)
time_days.85 = seq(from   = as.Date("1920-01-01"),  # start value
length = nt,  # end value
by     = "days")
# we now do a hard-rewrite of our time vector one day at a time.
tt1 = 1
for(yy in y1:y2) {
for(mm in 1:nm) {
tt2 = tt1+nd[mm]-1
time_days.85[tt1:tt2] = seq.Date(from = as.Date(paste(toString(yy),"-",
toString(mm),"-",
"01",
sep="")),
to   = as.Date(paste(toString(yy),    "-",
toString(mm),    "-",
toString(nd[mm]),
sep="")),
by   = "day")
tt1 = tt2+1
}
# print( c(toString(tt1-1),
#          toString(nt),
#          toString(as.Date(time_days.85[tt1-1]))
#          )
#      )
}
print(paste("final day",time_days.85[nt]))
# mirror the RCP45 time to match the RCP85
time_days.45 = time_days.85
time_days    = time_days.85
# and tidy things up
remove(y1,y2,yy,mm,nd,nm)
# create ensemble dimension
ensemble = seq(from =           1,  # start value
to   = n_ensembles,  # end value
by   =           1   # increment
)
# import spatial coordinates
lon = ncvar_get(nc    = nc.85, # netcdf file ID
varid = "lon"  # variable name from file
)
lon = lon - 360.0  # converting to +/- deg east for easier plotting
lat = ncvar_get(nc    = nc.85,  # netcdf file ID
varid = "lat"  # variable name from file
)
# we now get the target x and y locations
target_x <- which.min( abs(         lon -  target_lon) )
target_y <- which.min( abs(         lat -  target_lat) )
var2d.45 = ncvar_get(nc      = nc.45,                      # netcdf file ID
varid   = target_variable,            # variable name from file
verbose = FALSE,                      # print diagnostic data
start   = c( 1,  1,           1,  1), # starting coordinates
count   = c(10,  7, n_ensembles, nt)  # end coordinates (we're only going to 2080 and using 15 ensembles)
) * 9./5. - 459.67                  # scaling temperature from K to DegF
var2d.85 = ncvar_get(nc      = nc.85,                      # netcdf file ID
varid   = target_variable,            # variable name from file
verbose = FALSE,                      # print diagnostic data
start   = c( 1,  1,  1,  1),          # starting coordinates
count   = c(10,  7, n_ensembles, nt)  # end coordinates (we're only going to 2080 and using 15 ensembles)
) * 9./5. - 459.67                  # scaling temps from K to degF
dimnames(var2d.45) <- list(lon,lat,ensemble,time_days)
dimnames(var2d.85) <- list(lon,lat,ensemble,time_days)
remove(time_days.45,
time_days.85,
RCP_45_File,
RCP_85_File,
URL_45,
URL_85,
URL_Root_Directory,
nc.45,
nc.85)
var1d.45 = t(var2d.45[target_x, target_y, , ]) # t() == transpose
var1d.85 = t(var2d.85[target_x, target_y, , ]) # t() == transpose
dimnames(var1d.45) <- list(as.Date(time_days), ensemble)
dimnames(var1d.85) <- list(as.Date(time_days), ensemble)
variable = melt(data      = var1d.45,              # your array
na.rm       = TRUE,                  # don't use missing values
varnames    = c("Time","Ensemble"),  # names of your two dimensions
value.name  = "RCP45")               # the final name of your aray value
var1d.85 = melt(data        = var1d.85,              # your array
na.rm       = TRUE,                  # don't use missing values
varnames    = c("Time","Ensemble"),  # names of your two dimensions
value.name  = "RCP85")               # the final name of your aray value
variable$Time = as.Date(variable$Time, origin="1970-01-01")
variable$RCP85 = var1d.85$RCP85
variable$month   = month(variable$Time)
variable$year   = year(variable$Time)
variable$decade = trunc( variable$year/10. )*10
remove(var1d.85,
var1d.45,
var2d.45,
var2d.85,
lon,
lat,
target_lat,
target_lon,
target_variable,
target_x,
target_y)
#  variable = variable[(variable$month>=5 & variable$month<=9),]
str(variable)
ens_target = 1 # just use the first ensemble member
subset = subset(variable,
(Ensemble==ens_target)  &
((year>=base_start) &
(year<=base_end)   )
)
# always nice to see what your data looks like.
hist(x      = subset$RCP45, # omitting zero temperatures days
xlab   = paste(variable_name,                   # xaxis title
" (",
variable_units,
")",
sep=""),
main   = paste(location_name,
"RCP4.5 Ensemble Member 1",
sep = " "),
freq   = TRUE,
breaks = 100
)
fit_GP  = fevd(x          = RCP45,
data       = subset,
units      = variable_units,
time.units = "365/year",
type       = extreme_func,
verbose    = TRUE
)
plot(fit_GP)
