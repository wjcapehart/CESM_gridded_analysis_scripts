")",
sep=""),
main   = paste(location_name,
"RCP4.5 Ensemble Member 1",
sep = " "),
freq   = TRUE,
breaks = 100
)
fit_GP  = fevd(x          = RCP45,
data       = subset,
verbose    = TRUE,
threshold  = threshold_value,
units      = variable_units,
time.units = "365/year",
type       = "GP",
span       = period_span
)
plot(fit_GP)
return_intervals = seq(from =             2,
to   = period_span/2,
by   =             1)
n_return_intervals = length(return_intervals)
return_GP = return.level(x             = fit_GP,
return.period = return_intervals,
do.ci         = TRUE)
print(return_GP)
# tidy up the demo
remove(return_GP,
fit_GP,
subset)
# for each case/period create arrays for the return and CI bounds
# first for our base period
rcp45_base_period_return  = array(data= 0,
dim = c(n_ensembles,
n_return_intervals))
dimnames(rcp45_base_period_return) = list(ensemble,
return_intervals)
rcp45_base_period_ci_ub   = rcp45_base_period_return
rcp45_base_period_ci_lb   = rcp45_base_period_return
rcp85_base_period_return  = rcp45_base_period_return
rcp85_base_period_ci_ub   = rcp45_base_period_return
rcp85_base_period_ci_lb   = rcp45_base_period_return
# then for our test period(s)
rcp45_per1_period_return  = rcp45_base_period_return
rcp45_per1_period_ci_ub   = rcp45_base_period_return
rcp45_per1_period_ci_lb   = rcp45_base_period_return
rcp85_per1_period_return  = rcp45_base_period_return
rcp85_per1_period_ci_ub   = rcp45_base_period_return
rcp85_per1_period_ci_lb   = rcp45_base_period_return
for (ens_target in 1:n_ensembles) {
######################################
#
# Base Period
#
# create segments for RCP 45 and RCP 85 for your period(s)
subset = subset(variable,
(Ensemble==ens_target)  &
((year>=base_start) &
(year<=base_end)   )
)
# fit an extreme value dist to the data
fit_GP_45 = fevd(x          = RCP45,
data       = subset,
verbose    = FALSE,
threshold  = threshold_value,
units      = variable_units,
time.units = "365/year",
type       = "GP",
span       = period_span
)
fit_GP_85 = fevd(x          = RCP85,
data       = subset,
verbose    = FALSE,
threshold  = threshold_value,
units      = variable_units,
time.units = "365/year",
type       = "GP",
span       = period_span
)
# calculate the return periods and load into the temporary storage arrays.
return_GP = return.level(x             = fit_GP_45,
return.period = return_intervals,
do.ci         = TRUE)
rcp45_base_period_ci_lb[ ens_target, ] = return_GP[ , 1]
rcp45_base_period_return[ens_target, ] = return_GP[ , 2]
rcp45_base_period_ci_ub[ ens_target, ] = return_GP[ , 3]
return_GP = return.level(x             = fit_GP_85,
return.period = return_intervals,
do.ci         = TRUE)
rcp85_base_period_ci_lb[ ens_target, ] = return_GP[ , 1]
rcp85_base_period_return[ens_target, ] = return_GP[ , 2]
rcp85_base_period_ci_ub[ ens_target, ] = return_GP[ , 3]
# tidy up
remove(subset,
fit_GP_45,
fit_GP_85,
return_GP)
#
######################################
######################################
#
#  Period #1
#
# create segments for RCP 45 and RCP 85 for your period(s)
subset = subset(variable,
(Ensemble==ens_target)  &
((year>=per1_start) &
(year<=per1_end)   )
)
# fit an extreme value dist to the data
fit_GP_45 = fevd(x          = RCP45,
data       = subset,
verbose    = FALSE,
threshold  = threshold_value,
units      = variable_units,
time.units = "365/year",
type       = "GP",
span       = period_span
)
fit_GP_85 = fevd(x          = RCP85,
data       = subset,
verbose    = FALSE,
threshold  = threshold_value,
units      = variable_units,
time.units = "365/year",
type       = "GP",
span       = period_span
)
# calculate the return periods and load into the temporary storage arrays.
return_GP = return.level(x             = fit_GP_45,
return.period = return_intervals,
do.ci         = TRUE)
rcp45_per1_period_ci_lb[ ens_target, ] = return_GP[ , 1]
rcp45_per1_period_return[ens_target, ] = return_GP[ , 2]
rcp45_per1_period_ci_ub[ ens_target, ] = return_GP[ , 3]
return_GP = return.level(x             = fit_GP_85,
return.period = return_intervals,
do.ci         = TRUE)
rcp85_per1_period_ci_lb[ ens_target, ] = return_GP[ , 1]
rcp85_per1_period_return[ens_target, ] = return_GP[ , 2]
rcp85_per1_period_ci_ub[ ens_target, ] = return_GP[ , 3]
# tidy up
remove(subset,
fit_GP_45,
fit_GP_85,
return_GP)
#
######################################
}
################################################
#
# let's start with the base period
#
# melt 2-d arrays into frames.
rcp45_base   = melt(data       = rcp45_base_period_return,
varnames   = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "RCP45_Return_Period")
rcp45_cib_lb = melt(data       = rcp45_base_period_ci_lb,
varnames   = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "RCP45_Lower_95_CI")
rcp45_cib_ub = melt(data       = rcp45_base_period_ci_ub,
varnames   = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "RCP45_Upper_95_CI")
rcp85_base   = melt(data       = rcp85_base_period_return,
varnames   = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "RCP85_Return_Period")
rcp85_cib_lb = melt(data       = rcp85_base_period_ci_lb,
varnames   = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "RCP85_Lower_95_CI")
rcp85_cib_ub = melt(data       = rcp85_base_period_ci_ub,
varnames   = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "RCP85_Upper_95_CI")
# combine the fields into a single data frame for each one.
rcp45_base$RCP45_Lower_95_CI = rcp45_cib_lb$RCP45_Lower_95_CI
rcp45_base$RCP45_Upper_95_CI = rcp45_cib_ub$RCP45_Upper_95_CI
rcp85_base$RCP85_Lower_95_CI = rcp85_cib_lb$RCP85_Lower_95_CI
rcp85_base$RCP85_Upper_95_CI = rcp85_cib_ub$RCP85_Upper_95_CI
# tidy up
remove(rcp85_base_period_ci_lb,
rcp85_base_period_return,
rcp85_base_period_ci_ub,
rcp85_cib_lb,
rcp85_cib_ub)
remove(rcp45_base_period_ci_lb,
rcp45_base_period_return,
rcp45_base_period_ci_ub,
rcp45_cib_lb,
rcp45_cib_ub)
#
################################################
################################################
#
# and we can continue with the test period
#
rcp45_per1   = melt(data       = rcp45_per1_period_return,
varnames   = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "RCP45_Return_Period")
rcp45_ci1_lb = melt(data       = rcp45_per1_period_ci_lb,
varnames   = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "RCP45_Lower_95_CI")
rcp45_ci1_ub = melt(data       = rcp45_per1_period_ci_ub,
varnames   = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "RCP45_Upper_95_CI")
rcp85_per1   = melt(data       = rcp85_per1_period_return,
varnames   = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "RCP85_Return_Period")
rcp85_ci1_lb = melt(data       = rcp85_per1_period_ci_lb,
varnames   = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "RCP85_Lower_95_CI")
rcp85_ci1_ub = melt(data       = rcp85_per1_period_ci_ub,
varnames   = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "RCP85_Upper_95_CI")
# combine the fields into a single data frame for each one.
rcp45_per1$RCP45_Lower_95_CI = rcp45_ci1_lb$RCP45_Lower_95_CI
rcp45_per1$RCP45_Upper_95_CI = rcp45_ci1_ub$RCP45_Upper_95_CI
rcp85_per1$RCP85_Lower_95_CI = rcp85_ci1_lb$RCP85_Lower_95_CI
rcp85_per1$RCP85_Upper_95_CI = rcp85_ci1_ub$RCP85_Upper_95_CI
# tidy up
remove(rcp85_per1_period_ci_lb,
rcp85_per1_period_return,
rcp85_per1_period_ci_ub,
rcp85_ci1_lb,
rcp85_ci1_ub)
remove(rcp45_per1_period_ci_lb,
rcp45_per1_period_return,
rcp45_per1_period_ci_ub,
rcp45_ci1_lb,
rcp45_ci1_ub)
#
################################################
# I am making my own colours
darkcyan = rgb(red   = 0.00,
green = 0.50,
blue  = 0.50,
alpha = 0.75)  # 1 = opaque; 0 = fully clear
cyan     = rgb(red   = 0.00,
green = 1.00,
blue  = 1.00,
alpha = 0.50)
darkblue = rgb(red   = 0.00,
green = 0.00,
blue  = 0.50,
alpha = 0.75)
blue     = rgb(red   = 0.00,
green = 0.00,
blue  = 1.00,
alpha = 0.50)
darkmag  = rgb(red   = 0.50,
green = 0.00,
blue  = 0.50,
alpha = 0.75)
magenta  = rgb(red   = 1.00,
green = 0.00,
blue  = 1.00,
alpha = 0.50)
darkred  = rgb(red   = 0.50,
green = 0.00,
blue  = 0.00,
alpha = 0.75)
red      = rgb(red   = 1.00,
green = 0.00,
blue  = 0.00,
alpha = 0.50)
beanplot(formula     = RCP85_Return_Period~return_intervals,  # formula selection for y axis
data        = rcp85_base,                            # data frame to use
col         = c(magenta,  # area fill                # Color Scheme
darkmag,  # lines
darkmag,  # outside of bean line
darkmag), # mean line
border      = darkmag,                               # border color
overallline = "median",                              # can't get rid of this dang thing
beanlines   = "median",                              # use median for the "central value"
main        = paste(location_name,
" Return Intervals for ",         # title caption
base_start,
"-",
base_end,
sep=""),
xlab        = "Return Period (Years)",               # xaxis title
ylab        = paste(variable_name,                   # yaxis title
" (",
variable_units,
")",
sep=""),
log         = "",                                    # overide log axis on y (it defaults to log for big datasets)
xlim        = c(0,period_span/2),                    # x axis range
ylim        = c(min(rcp45_base$RCP45_Lower_95_CI,    # y axis range
rcp85_base$RCP85_Lower_95_CI),
max(rcp45_base$RCP45_Upper_95_CI,
rcp85_base$RCP85Upper_95_CI)
)
)
beanplot(formula    = RCP45_Return_Period~return_intervals,
data        = rcp45_base,
add         = TRUE,
beanlines   = "median",
overallline = "median",
col         = c(cyan,      # area fill
darkcyan,  # lines
darkcyan,  # outside of bean line
darkcyan), # mean line
border      = darkcyan
)
# create a temporary array to hold just the return periods for simplicity
deleteme     = data.frame(Ensembles        = rcp45_base$Ensembles,
return_intervals = rcp45_base$return_intervals,
RCP45            = rcp45_base$RCP45_Return_Period,
RCP85            = rcp85_base$RCP85_Return_Period)
# melt the RCP45 and RCP85 columns into a new field.
base_all     = melt(data       = deleteme,
varnames   = c("Ensembles","return_intervals","Scenario"),
id.vars    = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "Return_Period_Values")
colnames(base_all) <- c("Ensembles","return_intervals","Scenario","Return_Period_Values")
# for this to work below, the program will need to search through ONE variable for the axis
# you can use two (or more) sub-categories.
#
# to do this you need to create a new variable in the data table that will have two
# parts, separated by a space character.
#
# this your x-axis + "series" category would be
#
#  001 Cat1
#  002 Cat1
#  003 Cat1
#  001 Cat2
#  002 Cat3
# ... and so on.
#
# in this case we will have our return period year and then the RCP scenario.
# (We could also do this for different periods for a single RCP scenario)
#
# thus...
#  02 RCP45 (we need that leading zero)
#  02 RCP85
#   ...
#  20 RCP45
#  20 RCP85
base_all$merged_period_scenarios = paste(sprintf("%02d", base_all$return_intervals),
base_all$Scenario,
sep = " ")
# tidy up!
remove(deleteme)
beanplot(formula     = Return_Period_Values~merged_period_scenarios,  # formula selection for y axis
data        = base_all,                                     # data frame to use
col         = list(c(blue, darkblue,darkblue,darkblue),  # same order as earlier for each series
c(red,  darkred,  darkred, darkred)),
border      = c(darkblue,darkred),
overallline = "median",                              # can't get rid of this dang thing
beanlines   = "median",                              # use median for the "central value"
side        = "both",
main        = paste(location_name,
" Return Intervals for ",         # title caption
base_start,
"-",
base_end,
sep=""),
xlab        = "Return Period (Years)",               # xaxis title
ylab        = paste("Maximum ",
variable_name,                   # yaxis title
" (",
variable_units,
")",
sep=""),
log         = "",                                    # overide log axis on y (it defaults to log for big datasets)
xlim        = c(0,period_span/2),                    # x axis range
ylim        = c(min(rcp45_base$RCP45_Lower_95_CI,    # y axis range
rcp85_base$RCP85_Lower_95_CI),
max(rcp45_base$RCP45_Upper_95_CI,
rcp85_base$RCP85Upper_95_CI)
)
)
legend("topleft",
fill   = c("blue", "red"),
legend = c("RCP 4.5", "RCP 8.5"))
##################################################
#
#  Processing RCP 8.5
#
# create a temporary array to hold just the return periods for simplicity
deleteme     = data.frame(Ensembles        = rcp85_base$Ensembles,
return_intervals = rcp85_base$return_intervals,
Baseline         = rcp85_base$RCP85_Return_Period,
TestPeriod       = rcp85_per1$RCP85_Return_Period)
colnames(deleteme) = c("Ensembles","return_intervals",
paste(base_start, "-", base_end, sep=""),
paste(per1_start, "-", per1_end, sep=""))
# melt the two period columns into a new field.
rcp85_all    = melt(data       = deleteme,
varnames   = c("Ensembles","return_intervals","Time_Period"),
id.vars    = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "Return_Period_Values")
colnames(rcp85_all) = c("Ensembles","return_intervals","Time_Period","Return_Period_Values")
# create the merged variable for plotting...
rcp85_all$merged_period_scenarios = paste(sprintf("%02d", rcp85_all$return_intervals),
rcp85_all$Time_Period,
sep = " ")
# tidy up
remove (deleteme)
#
##################################################
beanplot(formula     = Return_Period_Values~merged_period_scenarios,  # formula selection for y axis
data        = rcp85_all,                                     # data frame to use
col         = list(c(blue, darkblue,darkblue,darkblue),  # same order as earlier for each series
c(red,  darkred,  darkred, darkred)),
border      = c(darkblue,darkred),
overallline = "median",                              # can't get rid of this dang thing
beanlines   = "median",                              # use median for the "central value"
side        = "both",
main        = paste(location_name,
"Return Intervals for RCP 8.5",
sep = " "),         # title caption
xlab        = "Return Period (Years)",               # xaxis title
ylab        = paste("Maximum ",
variable_name,                   # yaxis title
" (",
variable_units,
")",
sep=""),
log         = "",                                    # overide log axis on y (it defaults to log for big datasets)
xlim        = c(0,period_span/2),                    # x axis range
ylim        = c(min(rcp45_base$RCP45_Lower_95_CI,    # y axis range
rcp45_per1$RCP45_Lower_95_CI,
rcp85_base$RCP85_Lower_95_CI,
rcp85_per1$RCP85_Lower_95_CI),
max(rcp45_base$RCP45_Upper_95_CI,
rcp45_per1$RCP45_Upper_95_CI,
rcp85_base$RCP85_Upper_95_CI,
rcp85_per1$RCP85_Upper_95_CI)
)
)
legend("topleft",
fill = c("blue", "red"),
legend = c(paste(base_start, "-", base_end, sep=""),
paste(per1_start, "-", per1_end, sep=""))
)
##################################################
#
#  Processing RCP 4.5
#
# create a temporary array to hold just the return periods for simplicity
deleteme     = data.frame(Ensembles        = rcp45_base$Ensembles,
return_intervals = rcp45_base$return_intervals,
Baseline         = rcp45_base$RCP45_Return_Period,
TestPeriod       = rcp45_per1$RCP45_Return_Period)
colnames(deleteme) = c("Ensembles","return_intervals",
paste(base_start, "-", base_end, sep=""),
paste(per1_start, "-", per1_end, sep=""))
# melt the two period columns into a new field.
rcp45_all    = melt(data       = deleteme,
varnames   = c("Ensembles","return_intervals","Time_Period"),
id.vars    = c("Ensembles","return_intervals"),
na.rm      = TRUE,
value.name = "Return_Period_Values")
colnames(rcp45_all) = c("Ensembles","return_intervals","Time_Period","Return_Period_Values")
# create the merged variable for plotting...
rcp45_all$merged_period_scenarios = paste(sprintf("%02d", rcp45_all$return_intervals),
rcp85_all$Time_Period,
sep = " ")
# tidy up
remove (deleteme)
#
##################################################
beanplot(formula     = Return_Period_Values~merged_period_scenarios,  # formula selection for y axis
data        = rcp45_all,                                     # data frame to use
col         = list(c(blue, darkblue,darkblue,darkblue),  # same order as earlier for each series
c(red,  darkred,  darkred, darkred)),
border      = c(darkblue,darkred),
overallline = "median",                              # can't get rid of this dang thing
beanlines   = "median",                              # use median for the "central value"
side        = "both",
main        = paste(location_name,
"Return Intervals for RCP 4.5",
sep = " "),         # title caption
xlab        = "Return Period (Years)",               # xaxis title
ylab        = paste("Maximum ",
variable_name,                   # yaxis title
" (",
variable_units,
")",
sep=""),
log         = "",                                    # overide log axis on y (it defaults to log for big datasets)
xlim        = c(0,period_span/2),                           # x axis range
ylim        = c(min(rcp45_base$RCP45_Lower_95_CI,    # y axis range
rcp45_per1$RCP45_Lower_95_CI,
rcp85_base$RCP45_Lower_95_CI,
rcp85_per1$RCP45_Lower_95_CI),
max(rcp45_base$RCP45_Upper_95_CI,
rcp45_per1$RCP45_Upper_95_CI,
rcp85_base$RCP85_Upper_95_CI,
rcp85_per1$RCP85_Upper_95_CI)
)
)
legend("topleft",
fill = c("blue", "red"),
legend = c(paste(base_start, "-", base_end, sep=""),
paste(per1_start, "-", per1_end, sep=""))
)
